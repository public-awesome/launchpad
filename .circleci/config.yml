version: 2
workflows:
  version: 2
  test:
    jobs:
      - contract_sg721_base
      - contract_sg721_nt
      - contract_base_factory
      - contract_base_minter
      - contract_vending_factory
      - contract_vending_minter
      - contract_open_edition_factory
      - contract_open_edition_minter
      - contract_whitelist
      - sg-eth-airdrop
      - test-suite
      - package_sg_std
      - package_sg_utils
      - lint
      - wasm-build

  deploy:
    jobs:
      - build_and_upload_contracts:
          filters:
            tags:
              only: /^v[0-9]+\.[0-9]+\.[0-9]+.*/
            branches:
              ignore: /.*/

jobs:
  contract_sg721_base:
    docker:
      - image: rust:1.73.0
    working_directory: ~/project/contracts/collections/sg721-base
    steps:
      - checkout:
          path: ~/project
      - run:
          name: Version information
          command: rustc --version; cargo --version; rustup --version
      - restore_cache:
          keys:
            - cargocache-sg721-rust:1.73.0-{{ checksum "~/project/Cargo.lock" }}
      - run:
          name: Unit Tests
          environment:
            RUST_BACKTRACE: 1
          command: cargo unit-test --locked
      - run:
          name: Build and run schema generator
          command: cargo schema --locked
      - run:
          name: Ensure checked-in schemas are up-to-date
          command: |
            CHANGES_IN_REPO=$(git status --porcelain)
            if [[ -n "$CHANGES_IN_REPO" ]]; then
              echo "Repository is dirty. Showing 'git status' and 'git --no-pager diff' for debugging now:"
              git status && git --no-pager diff
              exit 1
            fi
      - save_cache:
          paths:
            - /usr/local/cargo/registry
            - target
          key: cargocache-sg721-rust:1.73.0-{{ checksum "~/project/Cargo.lock" }}

  contract_sg721_nt:
    docker:
      - image: rust:1.73.0
    working_directory: ~/project/contracts/collections/sg721-nt
    steps:
      - checkout:
          path: ~/project
      - run:
          name: Version information
          command: rustc --version; cargo --version; rustup --version
      - restore_cache:
          keys:
            - cargocache-sg721-nt-rust:1.73.0-{{ checksum "~/project/Cargo.lock" }}
      - run:
          name: Unit Tests
          environment:
            RUST_BACKTRACE: 1
          command: cargo unit-test --locked
      - run:
          name: Build and run schema generator
          command: cargo schema --locked
      - run:
          name: Ensure checked-in schemas are up-to-date
          command: |
            CHANGES_IN_REPO=$(git status --porcelain)
            if [[ -n "$CHANGES_IN_REPO" ]]; then
              echo "Repository is dirty. Showing 'git status' and 'git --no-pager diff' for debugging now:"
              git status && git --no-pager diff
              exit 1
            fi
      - save_cache:
          paths:
            - /usr/local/cargo/registry
            - target
          key: cargocache-sg721-nt-rust:1.73.0-{{ checksum "~/project/Cargo.lock" }}

  contract_base_factory:
    docker:
      - image: rust:1.73.0
    working_directory: ~/project/contracts/factories/base-factory
    steps:
      - checkout:
          path: ~/project
      - run:
          name: Version information
          command: rustc --version; cargo --version; rustup --version
      - restore_cache:
          keys:
            - cargocache-base-factory-rust:1.73.0-{{ checksum "~/project/Cargo.lock" }}
      - run:
          name: Unit Tests
          environment:
            RUST_BACKTRACE: 1
          command: cargo unit-test --locked
      - run:
          name: Build and run schema generator
          command: cargo schema --locked
      # - run:
      #     name: Ensure checked-in schemas are up-to-date
      #     command: |
      #       CHANGES_IN_REPO=$(git status --porcelain)
      #       if [[ -n "$CHANGES_IN_REPO" ]]; then
      #         echo "Repository is dirty. Showing 'git status' and 'git --no-pager diff' for debugging now:"
      #         git status && git --no-pager diff
      #         exit 1
      #       fi
      - save_cache:
          paths:
            - /usr/local/cargo/registry
            - target
          key: cargocache-base-factory-rust:1.73.0-{{ checksum "~/project/Cargo.lock" }}

  contract_base_minter:
    docker:
      - image: rust:1.73.0
    working_directory: ~/project/contracts/minters/base-minter
    steps:
      - checkout:
          path: ~/project
      - run:
          name: Version information
          command: rustc --version; cargo --version; rustup --version
      - restore_cache:
          keys:
            - cargocache-base-minter-rust:1.73.0-{{ checksum "~/project/Cargo.lock" }}
      - run:
          name: Unit Tests
          environment:
            RUST_BACKTRACE: 1
          command: cargo unit-test --locked
      - run:
          name: Build and run schema generator
          command: cargo schema --locked
      # - run:
      #     name: Ensure checked-in schemas are up-to-date
      #     command: |
      #       CHANGES_IN_REPO=$(git status --porcelain)
      #       if [[ -n "$CHANGES_IN_REPO" ]]; then
      #         echo "Repository is dirty. Showing 'git status' and 'git --no-pager diff' for debugging now:"
      #         git status && git --no-pager diff
      #         exit 1
      #       fi
      - save_cache:
          paths:
            - /usr/local/cargo/registry
            - target
          key: cargocache-base-minter-rust:1.73.0-{{ checksum "~/project/Cargo.lock" }}

  contract_vending_factory:
    docker:
      - image: rust:1.73.0
    working_directory: ~/project/contracts/factories/vending-factory
    steps:
      - checkout:
          path: ~/project
      - run:
          name: Version information
          command: rustc --version; cargo --version; rustup --version
      - restore_cache:
          keys:
            - cargocache-vending-factory-rust:1.73.0-{{ checksum "~/project/Cargo.lock" }}
      - run:
          name: Unit Tests
          environment:
            RUST_BACKTRACE: 1
          command: cargo unit-test --locked
      - run:
          name: Build and run schema generator
          command: cargo schema --locked
      - run:
          name: Ensure checked-in schemas are up-to-date
          command: |
            CHANGES_IN_REPO=$(git status --porcelain)
            if [[ -n "$CHANGES_IN_REPO" ]]; then
              echo "Repository is dirty. Showing 'git status' and 'git --no-pager diff' for debugging now:"
              git status && git --no-pager diff
              exit 1
            fi
      - save_cache:
          paths:
            - /usr/local/cargo/registry
            - target
          key: cargocache-vending-factory-rust:1.73.0-{{ checksum "~/project/Cargo.lock" }}

  contract_vending_minter:
    docker:
      - image: rust:1.73.0
    working_directory: ~/project/contracts/minters/vending-minter
    steps:
      - checkout:
          path: ~/project
      - run:
          name: Version information
          command: rustc --version; cargo --version; rustup --version
      - restore_cache:
          keys:
            - cargocache-vending-minter-rust:1.73.0-{{ checksum "~/project/Cargo.lock" }}
      - run:
          name: Unit Tests
          environment:
            RUST_BACKTRACE: 1
          command: cargo unit-test --locked
      - run:
          name: Build and run schema generator
          command: cargo schema --locked
      - run:
          name: Ensure checked-in schemas are up-to-date
          command: |
            CHANGES_IN_REPO=$(git status --porcelain)
            if [[ -n "$CHANGES_IN_REPO" ]]; then
              echo "Repository is dirty. Showing 'git status' and 'git --no-pager diff' for debugging now:"
              git status && git --no-pager diff
              exit 1
            fi
      - save_cache:
          paths:
            - /usr/local/cargo/registry
            - target
          key: cargocache-vending-minter-rust:1.73.0-{{ checksum "~/project/Cargo.lock" }}

  contract_open_edition_factory:
    docker:
      - image: rust:1.73.0
    working_directory: ~/project/contracts/factories/open-edition-factory
    steps:
      - checkout:
          path: ~/project
      - run:
          name: Version information
          command: rustc --version; cargo --version; rustup --version
      - restore_cache:
          keys:
            - cargocache-open-edition-factory-rust:1.73.0-{{ checksum "~/project/Cargo.lock" }}
      - run:
          name: Unit Tests
          environment:
            RUST_BACKTRACE: 1
          command: cargo unit-test --locked
      - run:
          name: Build and run schema generator
          command: cargo schema --locked
      - run:
          name: Ensure checked-in schemas are up-to-date
          command: |
            CHANGES_IN_REPO=$(git status --porcelain)
            if [[ -n "$CHANGES_IN_REPO" ]]; then
              echo "Repository is dirty. Showing 'git status' and 'git --no-pager diff' for debugging now:"
              git status && git --no-pager diff
              exit 1
            fi
      - save_cache:
          paths:
            - /usr/local/cargo/registry
            - target
          key: cargocache-open-edition-factory-rust:1.73.0-{{ checksum "~/project/Cargo.lock" }}

  contract_open_edition_minter:
    docker:
      - image: rust:1.73.0
    working_directory: ~/project/contracts/minters/open-edition-minter
    steps:
      - checkout:
          path: ~/project
      - run:
          name: Version information
          command: rustc --version; cargo --version; rustup --version
      - restore_cache:
          keys:
            - cargocache-open-edition-minter-rust:1.73.0-{{ checksum "~/project/Cargo.lock" }}
      - run:
          name: Unit Tests
          environment:
            RUST_BACKTRACE: 1
          command: cargo unit-test --locked
      - run:
          name: Build and run schema generator
          command: cargo schema --locked
      - run:
          name: Ensure checked-in schemas are up-to-date
          command: |
            CHANGES_IN_REPO=$(git status --porcelain)
            if [[ -n "$CHANGES_IN_REPO" ]]; then
              echo "Repository is dirty. Showing 'git status' and 'git --no-pager diff' for debugging now:"
              git status && git --no-pager diff
              exit 1
            fi
      - save_cache:
          paths:
            - /usr/local/cargo/registry
            - target
          key: cargocache-open-edition-minter-rust:1.73.0-{{ checksum "~/project/Cargo.lock" }}

  contract_whitelist:
    docker:
      - image: rust:1.73.0
    working_directory: ~/project/contracts/whitelists/whitelist
    steps:
      - checkout:
          path: ~/project
      - run:
          name: Version information
          command: rustc --version; cargo --version; rustup --version
      - restore_cache:
          keys:
            - cargocache-whitelist-rust:1.73.0-{{ checksum "~/project/Cargo.lock" }}
      - run:
          name: Unit Tests
          environment:
            RUST_BACKTRACE: 1
          command: cargo unit-test --locked
      - run:
          name: Build and run schema generator
          command: cargo schema --locked
      - run:
          name: Ensure checked-in schemas are up-to-date
          command: |
            CHANGES_IN_REPO=$(git status --porcelain)
            if [[ -n "$CHANGES_IN_REPO" ]]; then
              echo "Repository is dirty. Showing 'git status' and 'git --no-pager diff' for debugging now:"
              git status && git --no-pager diff
              exit 1
            fi
      - save_cache:
          paths:
            - /usr/local/cargo/registry
            - target
          key: cargocache-whitelist-rust:1.73.0-{{ checksum "~/project/Cargo.lock" }}
  test-suite:
    docker:
      - image: rust:1.73.0
    working_directory: ~/project/test-suite
    steps:
      - checkout:
          path: ~/project
      - run:
          name: Version information
          command: rustc --version; cargo --version; rustup --version
      - restore_cache:
          keys:
            - cargocache-test-suite-rust:1.73.0-{{ checksum "~/project/Cargo.lock" }}
      - run:
          name: Unit Tests
          environment:
            RUST_BACKTRACE: 1
          command: cargo unit-test --locked
      - save_cache:
          paths:
            - /usr/local/cargo/registry
            - target
          key: cargocache-test-suite-rust:1.73.0-{{ checksum "~/project/Cargo.lock" }}

  package_sg_std:
    docker:
      - image: rust:1.73.0
    working_directory: ~/project/package/sg-std
    steps:
      - checkout:
          path: ~/project
      - run:
          name: Version information
          command: rustc --version; cargo --version; rustup --version
      - restore_cache:
          keys:
            - cargocache-sg-std-rust:1.73.0-{{ checksum "~/project/Cargo.lock" }}
      - run:
          name: Unit Tests
          environment:
            RUST_BACKTRACE: 1
          command: cargo unit-test --locked
      - save_cache:
          paths:
            - /usr/local/cargo/registry
            - target
          key: cargocache-sg-std-rust:1.73.0-{{ checksum "~/project/Cargo.lock" }}

  package_sg_utils:
    docker:
      - image: rust:1.73.0
    working_directory: ~/project/package/sg-utils
    steps:
      - checkout:
          path: ~/project
      - run:
          name: Version information
          command: rustc --version; cargo --version; rustup --version
      - restore_cache:
          keys:
            - cargocache-sg-utils-rust:1.73.0-{{ checksum "~/project/Cargo.lock" }}
      - run:
          name: Unit Tests
          environment:
            RUST_BACKTRACE: 1
          command: cargo unit-test --locked
      - save_cache:
          paths:
            - /usr/local/cargo/registry
            - target
          key: cargocache-sg-utils-rust:1.73.0-{{ checksum "~/project/Cargo.lock" }}

  sg-eth-airdrop:
    docker:
      - image: rust:1.73.0
    working_directory: ~/project/contracts/sg-eth-airdrop
    steps:
      - checkout:
          path: ~/project
      - run:
          name: Version information
          command: rustc --version; cargo --version; rustup --version
      - restore_cache:
          keys:
            - cargocache-sg-eth-airdrop-rust:1.73.0-{{ checksum "~/project/Cargo.lock" }}
      - run:
          name: Unit Tests
          environment:
            RUST_BACKTRACE: 1
          command: cargo unit-test --locked
      - run:
          name: Build and run schema generator
          command: cargo schema --locked
      # - run:
      #     name: Ensure checked-in schemas are up-to-date
      #     command: |
      #       CHANGES_IN_REPO=$(git status --porcelain)
      #       if [[ -n "$CHANGES_IN_REPO" ]]; then
      #         echo "Repository is dirty. Showing 'git status' and 'git --no-pager diff' for debugging now:"
      #         git status && git --no-pager diff
      #         exit 1
      #       fi
      - save_cache:
          paths:
            - /usr/local/cargo/registry
            - target
          key: cargocache-sg-eth-airdrop-rust:1.73.0-{{ checksum "~/project/Cargo.lock" }}

  lint:
    docker:
      - image: rust:1.73.0
    steps:
      - checkout
      - run:
          name: Version information
          command: rustc --version; cargo --version; rustup --version; rustup target list --installed
      - restore_cache:
          keys:
            - cargocache-v2-lint-rust:1.73.0-{{ checksum "Cargo.lock" }}
      - run:
          name: Add rustfmt component
          command: rustup component add rustfmt
      - run:
          name: Add clippy component
          command: rustup component add clippy
      - run:
          name: Check formatting of workspace
          command: cargo fmt -- --check
      - run:
          name: Clippy linting on workspace
          command: cargo clippy --all-targets -- -D warnings
      - save_cache:
          paths:
            - /usr/local/cargo/registry
            - target/debug/.fingerprint
            - target/debug/build
            - target/debug/deps
          key: cargocache-v2-lint-rust:1.73.0-{{ checksum "Cargo.lock" }}

  # This runs one time on the top level to ensure all contracts compile properly into wasm.
  # We don't run the wasm build per contract build, and then reuse a lot of the same dependencies, so this speeds up CI time
  # for all the other tests.
  # We also sanity-check the resultant wasm files.
  wasm-build:
    docker:
      - image: rust:1.73.0
    steps:
      - checkout:
          path: ~/project
      - run:
          name: Version information
          command: rustc --version; cargo --version; rustup --version
      - restore_cache:
          keys:
            - cargocache-wasm-rust-no-wasm:1.73.0-{{ checksum "~/project/Cargo.lock" }}
      - run:
          name: Add wasm32 target
          command: rustup target add wasm32-unknown-unknown
      - run:
          name: Build Wasm Release
          command: |
            for C in ./contracts/collections/*/
            do
              echo "Compiling `basename $C`..."
              (cd $C && cargo build --release --lib --target wasm32-unknown-unknown --locked)
            done
            for C in ./contracts/factories/*/
            do
              echo "Compiling `basename $C`..."
              (cd $C && cargo build --release --lib --target wasm32-unknown-unknown --locked)
            done
            for C in ./contracts/minters/*/
            do
              echo "Compiling `basename $C`..."
              (cd $C && cargo build --release --lib --target wasm32-unknown-unknown --locked)
            done
            for C in ./contracts/sg-eth-airdrop/
            do
              echo "Compiling `basename $C`..."
              (cd $C && cargo build --release --lib --target wasm32-unknown-unknown --locked)
            done
            for C in ./contracts/splits/
            do
              echo "Compiling `basename $C`..."
              (cd $C && cargo build --release --lib --target wasm32-unknown-unknown --locked)
            done
            for C in ./contracts/whitelists/*/
            do
              echo "Compiling `basename $C`..."
              (cd $C && cargo build --release --lib --target wasm32-unknown-unknown --locked)
            done
      - run:
          name: Install check_contract
          # Uses --debug for compilation speed
          command: cargo install cosmwasm-check
      - save_cache:
          paths:
            - /usr/local/cargo/registry
            - /target/debug
            - /target/release
            - /target/tarpaulin
          key: cargocache-wasm-rust-no-wasm:1.73.0-{{ checksum "~/project/Cargo.lock" }}
      - run:
          name: Check wasm contracts
          command: |
            for W in ./target/wasm32-unknown-unknown/release/*.wasm
            do
              echo -n "Checking `basename $W`... "
              cosmwasm-check --available-capabilities iterator,staking,stargate,stargaze,cosmwasm_1_4,cosmwasm_1_3,cosmwasm_1_2,cosmwasm_1_1 $W
            done

  # This job roughly follows the instructions from https://circleci.com/blog/publishing-to-github-releases-via-circleci/
  build_and_upload_contracts:
    docker:
      # Image from https://github.com/cibuilds/github, based on alpine
      - image: cibuilds/github:0.13
    steps:
      - run:
          name: Install Docker client
          command: apk add docker-cli
      - setup_remote_docker
      - checkout
      - run:
          # We cannot mount local folders, see https://circleci.com/docs/2.0/building-docker-images/#mounting-folders
          name: Prepare volume with source code
          command: |
            # create a dummy container which will hold a volume with config
            docker create -v /code --name with_code alpine /bin/true
            # copy a config file into this volume
            docker cp Cargo.toml with_code:/code
            docker cp Cargo.lock with_code:/code
            # copy code into this volume
            docker cp ./contracts with_code:/code
            docker cp ./packages with_code:/code
            docker cp ./test-suite with_code:/code
            docker cp ./e2e with_code:/code
      - run:
          name: Build development contracts
          command: |
            docker run --volumes-from with_code cosmwasm/workspace-optimizer:0.12.13
            docker cp with_code:/code/artifacts ./artifacts
      - run:
          name: Show data
          command: |
            ls -l artifacts
            cat artifacts/checksums.txt
      - run:
          name: Publish artifacts on GitHub
          command: |
            TAG="$CIRCLE_TAG"
            TITLE="$TAG"
            BODY="Attached there are some build artifacts generated at this tag. Those are for development purposes only! Please use crates.io to find the packages of this release."
            ghr -t "$GITHUB_TOKEN" \
              -u "$CIRCLE_PROJECT_USERNAME" -r "$CIRCLE_PROJECT_REPONAME" \
              -c "$CIRCLE_SHA1" \
              -n "$TITLE" -b "$BODY" \
              -delete \
              "$TAG" ./artifacts/
