{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "InstantiateMsg",
  "type": "object",
  "required": [
    "params"
  ],
  "properties": {
    "params": {
      "$ref": "#/definitions/MinterParams_for_ParamsExtension"
    }
  },
  "definitions": {
    "Coin": {
      "type": "object",
      "required": [
        "amount",
        "denom"
      ],
      "properties": {
        "amount": {
          "$ref": "#/definitions/Uint128"
        },
        "denom": {
          "type": "string"
        }
      }
    },
    "MinterParams_for_ParamsExtension": {
      "description": "Common params for all minters used for storage",
      "type": "object",
      "required": [
        "code_id",
        "creation_fee",
        "extension",
        "max_trading_offset_secs",
        "min_mint_price",
        "mint_fee_bps"
      ],
      "properties": {
        "code_id": {
          "description": "The minter code id",
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        },
        "creation_fee": {
          "$ref": "#/definitions/Coin"
        },
        "extension": {
          "$ref": "#/definitions/ParamsExtension"
        },
        "max_trading_offset_secs": {
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        },
        "min_mint_price": {
          "$ref": "#/definitions/Coin"
        },
        "mint_fee_bps": {
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        }
      }
    },
    "ParamsExtension": {
      "description": "Parameters common to all vending minters, as determined by governance",
      "type": "object",
      "required": [
        "airdrop_mint_fee_bps",
        "airdrop_mint_price",
        "max_per_address_limit",
        "max_token_limit",
        "shuffle_fee"
      ],
      "properties": {
        "airdrop_mint_fee_bps": {
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        },
        "airdrop_mint_price": {
          "$ref": "#/definitions/Coin"
        },
        "max_per_address_limit": {
          "type": "integer",
          "format": "uint32",
          "minimum": 0.0
        },
        "max_token_limit": {
          "type": "integer",
          "format": "uint32",
          "minimum": 0.0
        },
        "shuffle_fee": {
          "$ref": "#/definitions/Coin"
        }
      }
    },
    "Uint128": {
      "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
      "type": "string"
    }
  }
}
