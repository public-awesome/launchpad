/**
* This file was automatically generated by @cosmwasm/ts-codegen@0.14.1.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

import { UseQueryOptions, useQuery, useMutation, UseMutationOptions } from "@tanstack/react-query";
import { ExecuteResult } from "@cosmjs/cosmwasm-stargate";
import { StdFee } from "@cosmjs/amino";
import { ExecuteMsg, Timestamp, Uint64, Decimal, Uint128, InstantiateMsg, CreateMinterMsgForNullable_Empty, CollectionParams, CollectionInfoForRoyaltyInfoResponse, RoyaltyInfoResponse, Empty, MinterParamsForNullable_Empty, Coin, Addr, MinterConfigForEmpty, MinterConfigResponseForEmpty, QueryMsg } from "./BaseMinter.types";
import { BaseMinterQueryClient, BaseMinterClient } from "./BaseMinter.client";
export const baseMinterQueryKeys = {
  contract: ([{
    contract: "baseMinter"
  }] as const),
  address: (contractAddress: string | undefined) => ([{ ...baseMinterQueryKeys.contract[0],
    address: contractAddress
  }] as const),
  config: (contractAddress: string | undefined, args?: Record<string, unknown>) => ([{ ...baseMinterQueryKeys.address(contractAddress)[0],
    method: "config",
    args
  }] as const),
  status: (contractAddress: string | undefined, args?: Record<string, unknown>) => ([{ ...baseMinterQueryKeys.address(contractAddress)[0],
    method: "status",
    args
  }] as const)
};
export interface BaseMinterReactQuery<TResponse, TData = TResponse> {
  client: BaseMinterQueryClient | undefined;
  options?: Omit<UseQueryOptions<TResponse, Error, TData>, "'queryKey' | 'queryFn' | 'initialData'"> & {
    initialData?: undefined;
  };
}
export interface BaseMinterStatusQuery<TData> extends BaseMinterReactQuery<StatusResponse, TData> {}
export function useBaseMinterStatusQuery<TData = StatusResponse>({
  client,
  options
}: BaseMinterStatusQuery<TData>) {
  return useQuery<StatusResponse, Error, TData>(baseMinterQueryKeys.status(client?.contractAddress), () => client ? client.status() : Promise.reject(new Error("Invalid client")), { ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  });
}
export interface BaseMinterConfigQuery<TData> extends BaseMinterReactQuery<ConfigResponse, TData> {}
export function useBaseMinterConfigQuery<TData = ConfigResponse>({
  client,
  options
}: BaseMinterConfigQuery<TData>) {
  return useQuery<ConfigResponse, Error, TData>(baseMinterQueryKeys.config(client?.contractAddress), () => client ? client.config() : Promise.reject(new Error("Invalid client")), { ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  });
}
export interface BaseMinterUpdateTradingStartTimeMutation {
  client: BaseMinterClient;
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useBaseMinterUpdateTradingStartTimeMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, BaseMinterUpdateTradingStartTimeMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, BaseMinterUpdateTradingStartTimeMutation>(({
    client,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.updateTradingStartTime(fee, memo, funds), options);
}
export interface BaseMinterMintMutation {
  client: BaseMinterClient;
  msg: {
    tokenUri: string;
  };
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useBaseMinterMintMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, BaseMinterMintMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, BaseMinterMintMutation>(({
    client,
    msg,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.mint(msg, fee, memo, funds), options);
}