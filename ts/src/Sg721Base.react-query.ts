/**
* This file was automatically generated by @cosmwasm/ts-codegen@0.16.5.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

import { UseQueryOptions, useQuery } from "@tanstack/react-query";
import { Expiration, Timestamp, Uint64, AllNftInfoResponse, OwnerOfResponse, Approval, NftInfoResponseForEmpty, Empty, AllOperatorsResponse, AllTokensResponse, ApprovalResponse, ApprovalsResponse, Decimal, CollectionInfoResponse, RoyaltyInfoResponse, ContractInfoResponse, InstantiateMsg, CollectionInfoForRoyaltyInfoResponse, MinterResponse, NftInfoResponse, NumTokensResponse, OperatorsResponse, QueryMsg, TokensResponse } from "./Sg721Base.types";
import { Sg721BaseQueryClient } from "./Sg721Base.client";
export const sg721BaseQueryKeys = {
  contract: ([{
    contract: "sg721Base"
  }] as const),
  address: (contractAddress: string | undefined) => ([{ ...sg721BaseQueryKeys.contract[0],
    address: contractAddress
  }] as const),
  ownerOf: (contractAddress: string | undefined, args?: Record<string, unknown>) => ([{ ...sg721BaseQueryKeys.address(contractAddress)[0],
    method: "owner_of",
    args
  }] as const),
  approval: (contractAddress: string | undefined, args?: Record<string, unknown>) => ([{ ...sg721BaseQueryKeys.address(contractAddress)[0],
    method: "approval",
    args
  }] as const),
  approvals: (contractAddress: string | undefined, args?: Record<string, unknown>) => ([{ ...sg721BaseQueryKeys.address(contractAddress)[0],
    method: "approvals",
    args
  }] as const),
  allOperators: (contractAddress: string | undefined, args?: Record<string, unknown>) => ([{ ...sg721BaseQueryKeys.address(contractAddress)[0],
    method: "all_operators",
    args
  }] as const),
  numTokens: (contractAddress: string | undefined, args?: Record<string, unknown>) => ([{ ...sg721BaseQueryKeys.address(contractAddress)[0],
    method: "num_tokens",
    args
  }] as const),
  contractInfo: (contractAddress: string | undefined, args?: Record<string, unknown>) => ([{ ...sg721BaseQueryKeys.address(contractAddress)[0],
    method: "contract_info",
    args
  }] as const),
  nftInfo: (contractAddress: string | undefined, args?: Record<string, unknown>) => ([{ ...sg721BaseQueryKeys.address(contractAddress)[0],
    method: "nft_info",
    args
  }] as const),
  allNftInfo: (contractAddress: string | undefined, args?: Record<string, unknown>) => ([{ ...sg721BaseQueryKeys.address(contractAddress)[0],
    method: "all_nft_info",
    args
  }] as const),
  tokens: (contractAddress: string | undefined, args?: Record<string, unknown>) => ([{ ...sg721BaseQueryKeys.address(contractAddress)[0],
    method: "tokens",
    args
  }] as const),
  allTokens: (contractAddress: string | undefined, args?: Record<string, unknown>) => ([{ ...sg721BaseQueryKeys.address(contractAddress)[0],
    method: "all_tokens",
    args
  }] as const),
  minter: (contractAddress: string | undefined, args?: Record<string, unknown>) => ([{ ...sg721BaseQueryKeys.address(contractAddress)[0],
    method: "minter",
    args
  }] as const),
  collectionInfo: (contractAddress: string | undefined, args?: Record<string, unknown>) => ([{ ...sg721BaseQueryKeys.address(contractAddress)[0],
    method: "collection_info",
    args
  }] as const)
};
export interface Sg721BaseReactQuery<TResponse, TData = TResponse> {
  client: Sg721BaseQueryClient | undefined;
  options?: Omit<UseQueryOptions<TResponse, Error, TData>, "'queryKey' | 'queryFn' | 'initialData'"> & {
    initialData?: undefined;
  };
}
export interface Sg721BaseCollectionInfoQuery<TData> extends Sg721BaseReactQuery<CollectionInfoResponse, TData> {}
export function useSg721BaseCollectionInfoQuery<TData = CollectionInfoResponse>({
  client,
  options
}: Sg721BaseCollectionInfoQuery<TData>) {
  return useQuery<CollectionInfoResponse, Error, TData>(sg721BaseQueryKeys.collectionInfo(client?.contractAddress), () => client ? client.collectionInfo() : Promise.reject(new Error("Invalid client")), { ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  });
}
export interface Sg721BaseMinterQuery<TData> extends Sg721BaseReactQuery<MinterResponse, TData> {}
export function useSg721BaseMinterQuery<TData = MinterResponse>({
  client,
  options
}: Sg721BaseMinterQuery<TData>) {
  return useQuery<MinterResponse, Error, TData>(sg721BaseQueryKeys.minter(client?.contractAddress), () => client ? client.minter() : Promise.reject(new Error("Invalid client")), { ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  });
}
export interface Sg721BaseAllTokensQuery<TData> extends Sg721BaseReactQuery<AllTokensResponse, TData> {
  args: {
    limit?: number;
    startAfter?: string;
  };
}
export function useSg721BaseAllTokensQuery<TData = AllTokensResponse>({
  client,
  args,
  options
}: Sg721BaseAllTokensQuery<TData>) {
  return useQuery<AllTokensResponse, Error, TData>(sg721BaseQueryKeys.allTokens(client?.contractAddress, args), () => client ? client.allTokens({
    limit: args.limit,
    startAfter: args.startAfter
  }) : Promise.reject(new Error("Invalid client")), { ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  });
}
export interface Sg721BaseTokensQuery<TData> extends Sg721BaseReactQuery<TokensResponse, TData> {
  args: {
    limit?: number;
    owner: string;
    startAfter?: string;
  };
}
export function useSg721BaseTokensQuery<TData = TokensResponse>({
  client,
  args,
  options
}: Sg721BaseTokensQuery<TData>) {
  return useQuery<TokensResponse, Error, TData>(sg721BaseQueryKeys.tokens(client?.contractAddress, args), () => client ? client.tokens({
    limit: args.limit,
    owner: args.owner,
    startAfter: args.startAfter
  }) : Promise.reject(new Error("Invalid client")), { ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  });
}
export interface Sg721BaseAllNftInfoQuery<TData> extends Sg721BaseReactQuery<AllNftInfoResponse, TData> {
  args: {
    includeExpired?: boolean;
    tokenId: string;
  };
}
export function useSg721BaseAllNftInfoQuery<TData = AllNftInfoResponse>({
  client,
  args,
  options
}: Sg721BaseAllNftInfoQuery<TData>) {
  return useQuery<AllNftInfoResponse, Error, TData>(sg721BaseQueryKeys.allNftInfo(client?.contractAddress, args), () => client ? client.allNftInfo({
    includeExpired: args.includeExpired,
    tokenId: args.tokenId
  }) : Promise.reject(new Error("Invalid client")), { ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  });
}
export interface Sg721BaseNftInfoQuery<TData> extends Sg721BaseReactQuery<NftInfoResponse, TData> {
  args: {
    tokenId: string;
  };
}
export function useSg721BaseNftInfoQuery<TData = NftInfoResponse>({
  client,
  args,
  options
}: Sg721BaseNftInfoQuery<TData>) {
  return useQuery<NftInfoResponse, Error, TData>(sg721BaseQueryKeys.nftInfo(client?.contractAddress, args), () => client ? client.nftInfo({
    tokenId: args.tokenId
  }) : Promise.reject(new Error("Invalid client")), { ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  });
}
export interface Sg721BaseContractInfoQuery<TData> extends Sg721BaseReactQuery<ContractInfoResponse, TData> {}
export function useSg721BaseContractInfoQuery<TData = ContractInfoResponse>({
  client,
  options
}: Sg721BaseContractInfoQuery<TData>) {
  return useQuery<ContractInfoResponse, Error, TData>(sg721BaseQueryKeys.contractInfo(client?.contractAddress), () => client ? client.contractInfo() : Promise.reject(new Error("Invalid client")), { ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  });
}
export interface Sg721BaseNumTokensQuery<TData> extends Sg721BaseReactQuery<NumTokensResponse, TData> {}
export function useSg721BaseNumTokensQuery<TData = NumTokensResponse>({
  client,
  options
}: Sg721BaseNumTokensQuery<TData>) {
  return useQuery<NumTokensResponse, Error, TData>(sg721BaseQueryKeys.numTokens(client?.contractAddress), () => client ? client.numTokens() : Promise.reject(new Error("Invalid client")), { ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  });
}
export interface Sg721BaseAllOperatorsQuery<TData> extends Sg721BaseReactQuery<AllOperatorsResponse, TData> {
  args: {
    includeExpired?: boolean;
    limit?: number;
    owner: string;
    startAfter?: string;
  };
}
export function useSg721BaseAllOperatorsQuery<TData = AllOperatorsResponse>({
  client,
  args,
  options
}: Sg721BaseAllOperatorsQuery<TData>) {
  return useQuery<AllOperatorsResponse, Error, TData>(sg721BaseQueryKeys.allOperators(client?.contractAddress, args), () => client ? client.allOperators({
    includeExpired: args.includeExpired,
    limit: args.limit,
    owner: args.owner,
    startAfter: args.startAfter
  }) : Promise.reject(new Error("Invalid client")), { ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  });
}
export interface Sg721BaseApprovalsQuery<TData> extends Sg721BaseReactQuery<ApprovalsResponse, TData> {
  args: {
    includeExpired?: boolean;
    tokenId: string;
  };
}
export function useSg721BaseApprovalsQuery<TData = ApprovalsResponse>({
  client,
  args,
  options
}: Sg721BaseApprovalsQuery<TData>) {
  return useQuery<ApprovalsResponse, Error, TData>(sg721BaseQueryKeys.approvals(client?.contractAddress, args), () => client ? client.approvals({
    includeExpired: args.includeExpired,
    tokenId: args.tokenId
  }) : Promise.reject(new Error("Invalid client")), { ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  });
}
export interface Sg721BaseApprovalQuery<TData> extends Sg721BaseReactQuery<ApprovalResponse, TData> {
  args: {
    includeExpired?: boolean;
    spender: string;
    tokenId: string;
  };
}
export function useSg721BaseApprovalQuery<TData = ApprovalResponse>({
  client,
  args,
  options
}: Sg721BaseApprovalQuery<TData>) {
  return useQuery<ApprovalResponse, Error, TData>(sg721BaseQueryKeys.approval(client?.contractAddress, args), () => client ? client.approval({
    includeExpired: args.includeExpired,
    spender: args.spender,
    tokenId: args.tokenId
  }) : Promise.reject(new Error("Invalid client")), { ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  });
}
export interface Sg721BaseOwnerOfQuery<TData> extends Sg721BaseReactQuery<OwnerOfResponse, TData> {
  args: {
    includeExpired?: boolean;
    tokenId: string;
  };
}
export function useSg721BaseOwnerOfQuery<TData = OwnerOfResponse>({
  client,
  args,
  options
}: Sg721BaseOwnerOfQuery<TData>) {
  return useQuery<OwnerOfResponse, Error, TData>(sg721BaseQueryKeys.ownerOf(client?.contractAddress, args), () => client ? client.ownerOf({
    includeExpired: args.includeExpired,
    tokenId: args.tokenId
  }) : Promise.reject(new Error("Invalid client")), { ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  });
}