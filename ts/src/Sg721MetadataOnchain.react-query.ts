/**
* This file was automatically generated by @cosmwasm/ts-codegen@0.16.5.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

import { UseQueryOptions, useQuery, useMutation, UseMutationOptions } from "@tanstack/react-query";
import { ExecuteResult } from "@cosmjs/cosmwasm-stargate";
import { StdFee, Coin } from "@cosmjs/amino";
import { Expiration, Timestamp, Uint64, AllNftInfoResponse, OwnerOfResponse, Approval, NftInfoResponseForMetadata, Metadata, Trait, ApprovalResponse, ApprovalsResponse, ContractInfoResponse, ExecuteMsg, Binary, MintMsgForMetadata, Decimal, InstantiateMsg, CollectionInfoForRoyaltyInfoResponse, RoyaltyInfoResponse, MinterResponse, NftInfoResponse, NumTokensResponse, OperatorsResponse, QueryMsg, TokensResponse } from "./Sg721MetadataOnchain.types";
import { Sg721MetadataOnchainQueryClient, Sg721MetadataOnchainClient } from "./Sg721MetadataOnchain.client";
export const sg721MetadataOnchainQueryKeys = {
  contract: ([{
    contract: "sg721MetadataOnchain"
  }] as const),
  address: (contractAddress: string | undefined) => ([{ ...sg721MetadataOnchainQueryKeys.contract[0],
    address: contractAddress
  }] as const),
  ownerOf: (contractAddress: string | undefined, args?: Record<string, unknown>) => ([{ ...sg721MetadataOnchainQueryKeys.address(contractAddress)[0],
    method: "owner_of",
    args
  }] as const),
  approval: (contractAddress: string | undefined, args?: Record<string, unknown>) => ([{ ...sg721MetadataOnchainQueryKeys.address(contractAddress)[0],
    method: "approval",
    args
  }] as const),
  approvals: (contractAddress: string | undefined, args?: Record<string, unknown>) => ([{ ...sg721MetadataOnchainQueryKeys.address(contractAddress)[0],
    method: "approvals",
    args
  }] as const),
  allOperators: (contractAddress: string | undefined, args?: Record<string, unknown>) => ([{ ...sg721MetadataOnchainQueryKeys.address(contractAddress)[0],
    method: "all_operators",
    args
  }] as const),
  numTokens: (contractAddress: string | undefined, args?: Record<string, unknown>) => ([{ ...sg721MetadataOnchainQueryKeys.address(contractAddress)[0],
    method: "num_tokens",
    args
  }] as const),
  contractInfo: (contractAddress: string | undefined, args?: Record<string, unknown>) => ([{ ...sg721MetadataOnchainQueryKeys.address(contractAddress)[0],
    method: "contract_info",
    args
  }] as const),
  nftInfo: (contractAddress: string | undefined, args?: Record<string, unknown>) => ([{ ...sg721MetadataOnchainQueryKeys.address(contractAddress)[0],
    method: "nft_info",
    args
  }] as const),
  allNftInfo: (contractAddress: string | undefined, args?: Record<string, unknown>) => ([{ ...sg721MetadataOnchainQueryKeys.address(contractAddress)[0],
    method: "all_nft_info",
    args
  }] as const),
  tokens: (contractAddress: string | undefined, args?: Record<string, unknown>) => ([{ ...sg721MetadataOnchainQueryKeys.address(contractAddress)[0],
    method: "tokens",
    args
  }] as const),
  allTokens: (contractAddress: string | undefined, args?: Record<string, unknown>) => ([{ ...sg721MetadataOnchainQueryKeys.address(contractAddress)[0],
    method: "all_tokens",
    args
  }] as const),
  minter: (contractAddress: string | undefined, args?: Record<string, unknown>) => ([{ ...sg721MetadataOnchainQueryKeys.address(contractAddress)[0],
    method: "minter",
    args
  }] as const),
  collectionInfo: (contractAddress: string | undefined, args?: Record<string, unknown>) => ([{ ...sg721MetadataOnchainQueryKeys.address(contractAddress)[0],
    method: "collection_info",
    args
  }] as const)
};
export interface Sg721MetadataOnchainReactQuery<TResponse, TData = TResponse> {
  client: Sg721MetadataOnchainQueryClient | undefined;
  options?: Omit<UseQueryOptions<TResponse, Error, TData>, "'queryKey' | 'queryFn' | 'initialData'"> & {
    initialData?: undefined;
  };
}
export interface Sg721MetadataOnchainCollectionInfoQuery<TData> extends Sg721MetadataOnchainReactQuery<CollectionInfoResponse, TData> {}
export function useSg721MetadataOnchainCollectionInfoQuery<TData = CollectionInfoResponse>({
  client,
  options
}: Sg721MetadataOnchainCollectionInfoQuery<TData>) {
  return useQuery<CollectionInfoResponse, Error, TData>(sg721MetadataOnchainQueryKeys.collectionInfo(client?.contractAddress), () => client ? client.collectionInfo() : Promise.reject(new Error("Invalid client")), { ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  });
}
export interface Sg721MetadataOnchainMinterQuery<TData> extends Sg721MetadataOnchainReactQuery<MinterResponse, TData> {}
export function useSg721MetadataOnchainMinterQuery<TData = MinterResponse>({
  client,
  options
}: Sg721MetadataOnchainMinterQuery<TData>) {
  return useQuery<MinterResponse, Error, TData>(sg721MetadataOnchainQueryKeys.minter(client?.contractAddress), () => client ? client.minter() : Promise.reject(new Error("Invalid client")), { ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  });
}
export interface Sg721MetadataOnchainAllTokensQuery<TData> extends Sg721MetadataOnchainReactQuery<AllTokensResponse, TData> {
  args: {
    limit?: number;
    startAfter?: string;
  };
}
export function useSg721MetadataOnchainAllTokensQuery<TData = AllTokensResponse>({
  client,
  args,
  options
}: Sg721MetadataOnchainAllTokensQuery<TData>) {
  return useQuery<AllTokensResponse, Error, TData>(sg721MetadataOnchainQueryKeys.allTokens(client?.contractAddress, args), () => client ? client.allTokens({
    limit: args.limit,
    startAfter: args.startAfter
  }) : Promise.reject(new Error("Invalid client")), { ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  });
}
export interface Sg721MetadataOnchainTokensQuery<TData> extends Sg721MetadataOnchainReactQuery<TokensResponse, TData> {
  args: {
    limit?: number;
    owner: string;
    startAfter?: string;
  };
}
export function useSg721MetadataOnchainTokensQuery<TData = TokensResponse>({
  client,
  args,
  options
}: Sg721MetadataOnchainTokensQuery<TData>) {
  return useQuery<TokensResponse, Error, TData>(sg721MetadataOnchainQueryKeys.tokens(client?.contractAddress, args), () => client ? client.tokens({
    limit: args.limit,
    owner: args.owner,
    startAfter: args.startAfter
  }) : Promise.reject(new Error("Invalid client")), { ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  });
}
export interface Sg721MetadataOnchainAllNftInfoQuery<TData> extends Sg721MetadataOnchainReactQuery<AllNftInfoResponse, TData> {
  args: {
    includeExpired?: boolean;
    tokenId: string;
  };
}
export function useSg721MetadataOnchainAllNftInfoQuery<TData = AllNftInfoResponse>({
  client,
  args,
  options
}: Sg721MetadataOnchainAllNftInfoQuery<TData>) {
  return useQuery<AllNftInfoResponse, Error, TData>(sg721MetadataOnchainQueryKeys.allNftInfo(client?.contractAddress, args), () => client ? client.allNftInfo({
    includeExpired: args.includeExpired,
    tokenId: args.tokenId
  }) : Promise.reject(new Error("Invalid client")), { ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  });
}
export interface Sg721MetadataOnchainNftInfoQuery<TData> extends Sg721MetadataOnchainReactQuery<NftInfoResponse, TData> {
  args: {
    tokenId: string;
  };
}
export function useSg721MetadataOnchainNftInfoQuery<TData = NftInfoResponse>({
  client,
  args,
  options
}: Sg721MetadataOnchainNftInfoQuery<TData>) {
  return useQuery<NftInfoResponse, Error, TData>(sg721MetadataOnchainQueryKeys.nftInfo(client?.contractAddress, args), () => client ? client.nftInfo({
    tokenId: args.tokenId
  }) : Promise.reject(new Error("Invalid client")), { ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  });
}
export interface Sg721MetadataOnchainContractInfoQuery<TData> extends Sg721MetadataOnchainReactQuery<ContractInfoResponse, TData> {}
export function useSg721MetadataOnchainContractInfoQuery<TData = ContractInfoResponse>({
  client,
  options
}: Sg721MetadataOnchainContractInfoQuery<TData>) {
  return useQuery<ContractInfoResponse, Error, TData>(sg721MetadataOnchainQueryKeys.contractInfo(client?.contractAddress), () => client ? client.contractInfo() : Promise.reject(new Error("Invalid client")), { ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  });
}
export interface Sg721MetadataOnchainNumTokensQuery<TData> extends Sg721MetadataOnchainReactQuery<NumTokensResponse, TData> {}
export function useSg721MetadataOnchainNumTokensQuery<TData = NumTokensResponse>({
  client,
  options
}: Sg721MetadataOnchainNumTokensQuery<TData>) {
  return useQuery<NumTokensResponse, Error, TData>(sg721MetadataOnchainQueryKeys.numTokens(client?.contractAddress), () => client ? client.numTokens() : Promise.reject(new Error("Invalid client")), { ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  });
}
export interface Sg721MetadataOnchainAllOperatorsQuery<TData> extends Sg721MetadataOnchainReactQuery<AllOperatorsResponse, TData> {
  args: {
    includeExpired?: boolean;
    limit?: number;
    owner: string;
    startAfter?: string;
  };
}
export function useSg721MetadataOnchainAllOperatorsQuery<TData = AllOperatorsResponse>({
  client,
  args,
  options
}: Sg721MetadataOnchainAllOperatorsQuery<TData>) {
  return useQuery<AllOperatorsResponse, Error, TData>(sg721MetadataOnchainQueryKeys.allOperators(client?.contractAddress, args), () => client ? client.allOperators({
    includeExpired: args.includeExpired,
    limit: args.limit,
    owner: args.owner,
    startAfter: args.startAfter
  }) : Promise.reject(new Error("Invalid client")), { ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  });
}
export interface Sg721MetadataOnchainApprovalsQuery<TData> extends Sg721MetadataOnchainReactQuery<ApprovalsResponse, TData> {
  args: {
    includeExpired?: boolean;
    tokenId: string;
  };
}
export function useSg721MetadataOnchainApprovalsQuery<TData = ApprovalsResponse>({
  client,
  args,
  options
}: Sg721MetadataOnchainApprovalsQuery<TData>) {
  return useQuery<ApprovalsResponse, Error, TData>(sg721MetadataOnchainQueryKeys.approvals(client?.contractAddress, args), () => client ? client.approvals({
    includeExpired: args.includeExpired,
    tokenId: args.tokenId
  }) : Promise.reject(new Error("Invalid client")), { ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  });
}
export interface Sg721MetadataOnchainApprovalQuery<TData> extends Sg721MetadataOnchainReactQuery<ApprovalResponse, TData> {
  args: {
    includeExpired?: boolean;
    spender: string;
    tokenId: string;
  };
}
export function useSg721MetadataOnchainApprovalQuery<TData = ApprovalResponse>({
  client,
  args,
  options
}: Sg721MetadataOnchainApprovalQuery<TData>) {
  return useQuery<ApprovalResponse, Error, TData>(sg721MetadataOnchainQueryKeys.approval(client?.contractAddress, args), () => client ? client.approval({
    includeExpired: args.includeExpired,
    spender: args.spender,
    tokenId: args.tokenId
  }) : Promise.reject(new Error("Invalid client")), { ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  });
}
export interface Sg721MetadataOnchainOwnerOfQuery<TData> extends Sg721MetadataOnchainReactQuery<OwnerOfResponse, TData> {
  args: {
    includeExpired?: boolean;
    tokenId: string;
  };
}
export function useSg721MetadataOnchainOwnerOfQuery<TData = OwnerOfResponse>({
  client,
  args,
  options
}: Sg721MetadataOnchainOwnerOfQuery<TData>) {
  return useQuery<OwnerOfResponse, Error, TData>(sg721MetadataOnchainQueryKeys.ownerOf(client?.contractAddress, args), () => client ? client.ownerOf({
    includeExpired: args.includeExpired,
    tokenId: args.tokenId
  }) : Promise.reject(new Error("Invalid client")), { ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  });
}
export interface Sg721MetadataOnchainBurnMutation {
  client: Sg721MetadataOnchainClient;
  msg: {
    tokenId: string;
  };
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useSg721MetadataOnchainBurnMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, Sg721MetadataOnchainBurnMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, Sg721MetadataOnchainBurnMutation>(({
    client,
    msg,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.burn(msg, fee, memo, funds), options);
}
export interface Sg721MetadataOnchainMintMutation {
  client: Sg721MetadataOnchainClient;
  msg: MintMsgForMetadata;
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useSg721MetadataOnchainMintMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, Sg721MetadataOnchainMintMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, Sg721MetadataOnchainMintMutation>(({
    client,
    msg,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.mint(msg, fee, memo, funds), options);
}
export interface Sg721MetadataOnchainRevokeAllMutation {
  client: Sg721MetadataOnchainClient;
  msg: {
    operator: string;
  };
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useSg721MetadataOnchainRevokeAllMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, Sg721MetadataOnchainRevokeAllMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, Sg721MetadataOnchainRevokeAllMutation>(({
    client,
    msg,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.revokeAll(msg, fee, memo, funds), options);
}
export interface Sg721MetadataOnchainApproveAllMutation {
  client: Sg721MetadataOnchainClient;
  msg: {
    expires?: Expiration;
    operator: string;
  };
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useSg721MetadataOnchainApproveAllMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, Sg721MetadataOnchainApproveAllMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, Sg721MetadataOnchainApproveAllMutation>(({
    client,
    msg,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.approveAll(msg, fee, memo, funds), options);
}
export interface Sg721MetadataOnchainRevokeMutation {
  client: Sg721MetadataOnchainClient;
  msg: {
    spender: string;
    tokenId: string;
  };
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useSg721MetadataOnchainRevokeMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, Sg721MetadataOnchainRevokeMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, Sg721MetadataOnchainRevokeMutation>(({
    client,
    msg,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.revoke(msg, fee, memo, funds), options);
}
export interface Sg721MetadataOnchainApproveMutation {
  client: Sg721MetadataOnchainClient;
  msg: {
    expires?: Expiration;
    spender: string;
    tokenId: string;
  };
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useSg721MetadataOnchainApproveMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, Sg721MetadataOnchainApproveMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, Sg721MetadataOnchainApproveMutation>(({
    client,
    msg,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.approve(msg, fee, memo, funds), options);
}
export interface Sg721MetadataOnchainSendNftMutation {
  client: Sg721MetadataOnchainClient;
  msg: {
    contract: string;
    msg: Binary;
    tokenId: string;
  };
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useSg721MetadataOnchainSendNftMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, Sg721MetadataOnchainSendNftMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, Sg721MetadataOnchainSendNftMutation>(({
    client,
    msg,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.sendNft(msg, fee, memo, funds), options);
}
export interface Sg721MetadataOnchainTransferNftMutation {
  client: Sg721MetadataOnchainClient;
  msg: {
    recipient: string;
    tokenId: string;
  };
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useSg721MetadataOnchainTransferNftMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, Sg721MetadataOnchainTransferNftMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, Sg721MetadataOnchainTransferNftMutation>(({
    client,
    msg,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.transferNft(msg, fee, memo, funds), options);
}
export interface Sg721MetadataOnchainReadyMutation {
  client: Sg721MetadataOnchainClient;
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useSg721MetadataOnchainReadyMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, Sg721MetadataOnchainReadyMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, Sg721MetadataOnchainReadyMutation>(({
    client,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.ready(fee, memo, funds), options);
}